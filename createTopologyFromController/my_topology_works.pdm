Coupled
    {
        Type = Root
        Name = MyTopology
        Ports = 0; 0
        Description = Testing the creation of a topology by getting the info from the controller
        Graphic
            {
                Position = 0; 0
                Dimension = 600; 600
                Direction = Right
                Color = 15
                Icon = 
                Window = 5000; 5000; 5000; 5000
            }
        Parameters
            {
            }
        System
            {
            Atomic
                {
                Name = LoadScilabParams
                Ports = 1 ; 0
                Path = sinks/RunScilabJob.h
                Description = If Scilab is configured as backed in the cmd line options, this model runs Scilab commands at Init, Exit and when receive events.
                Graphic
                    {
                    Position = -9975 ; -12285
                    Dimension = 450 ; 435
                    Direction = Right
                    Color = 15
                    Icon = %sinks%scilab.ico
                    }
                Parameters
                    {
                    Run at Init = Str; exec('../examples/Matias/PhaseI/Scilab/model.scilabParams', 0) ; Scilab Job at Init
                    Run at External = Str;  ; Scilab Job when receive event
                    Run at Exit = Str;  ; Scilab Job at Exit
                    }
                }
            Atomic
                {
                Name = ExperimenetTracker
                Ports = 0 ; 0
                Path = sinks/SimulationExperimentTracker.h
                Description = Allows to use multiple simulation runs setting new parameter values in each run. It configures Scilab variables according to the current simunation number. This model should run with 1st priority!!
                Graphic
                    {
                    Position = -7635 ; -12420
                    Dimension = 570 ; 540
                    Direction = Right
                    Color = 15
                    Icon = %realtime%lcd.svg
                    }
                Parameters
                    {
                    ScilabSimulationSetID = Str; SimulationName ; indicates the simulation set ID
                    ScilabSimulationCounterVariableName = Str; ExperimentNumber ; Name of the Scilab variable that indicates the simulation number.
                    ScilabParametersVariableName = Str; ParameterValues ; Name of the Scilab variable that contains the parameter values for each simulation
                    ScilabParametersValuesVariableName = Str; ParameterNames ; Name of the Scilab variable that contains the parameter names for each simulation
                    }
                }
            Atomic
                {
                Name = UpdateScilabParams
                Ports = 1 ; 0
                Path = sinks/RunScilabJob.h
                Description = If Scilab is configured as backed in the cmd line options, this model runs Scilab commands at Init, Exit and when receive events.
                Graphic
                    {
                    Position = -5130 ; -12405
                    Dimension = 525 ; 510
                    Direction = Right
                    Color = 15
                    Icon = %sinks%scilab.ico
                    }
                Parameters
                    {
                    Run at Init = Str;  ; Scilab Job at Init
                    Run at External = Str;  ; Scilab Job when receive event
                    Run at Exit = Str;  ; Scilab Job at Exit
                    }
                }
        Atomic 
				{
		        Name = FelixServer1
		        Ports = 0 ; 1
		        Path = PhaseI/FelixServer.h
		        Description = Generates jobs. Distribution for the rate and jobSize are retrieved from the Flows assigned to this server
		        Graphic
		            {
		            Position = -9975 ; -10285
		            Dimension = 450 ; 435
		            Direction = Right
		            Color = 15
		            Icon = %datanetworks%generator.png
		            }
		        Parameters
		            {
		            }
		        }
		        Atomic 
				{
		        Name = FelixServer2
		        Ports = 0 ; 1
		        Path = PhaseI/FelixServer.h
		        Description = Generates jobs. Distribution for the rate and jobSize are retrieved from the Flows assigned to this server
		        Graphic
		            {
		            Position = -9225 ; -10285
		            Dimension = 450 ; 435
		            Direction = Right
		            Color = 15
		            Icon = %datanetworks%generator.png
		            }
		        Parameters
		            {
		            }
		        }
		        Atomic 
				{
		        Name = FelixServer3
		        Ports = 0 ; 1
		        Path = PhaseI/FelixServer.h
		        Description = Generates jobs. Distribution for the rate and jobSize are retrieved from the Flows assigned to this server
		        Graphic
		            {
		            Position = -8475 ; -10285
		            Dimension = 450 ; 435
		            Direction = Right
		            Color = 15
		            Icon = %datanetworks%generator.png
		            }
		        Parameters
		            {
		            }
		        }
		        Atomic 
				{
		        Name = FelixServer4
		        Ports = 0 ; 1
		        Path = PhaseI/FelixServer.h
		        Description = Generates jobs. Distribution for the rate and jobSize are retrieved from the Flows assigned to this server
		        Graphic
		            {
		            Position = -7725 ; -10285
		            Dimension = 450 ; 435
		            Direction = Right
		            Color = 15
		            Icon = %datanetworks%generator.png
		            }
		        Parameters
		            {
		            }
		        }
		        Atomic 
				{
		        Name = FelixServer5
		        Ports = 0 ; 1
		        Path = PhaseI/FelixServer.h
		        Description = Generates jobs. Distribution for the rate and jobSize are retrieved from the Flows assigned to this server
		        Graphic
		            {
		            Position = -6975 ; -10285
		            Dimension = 450 ; 435
		            Direction = Right
		            Color = 15
		            Icon = %datanetworks%generator.png
		            }
		        Parameters
		            {
		            }
		        }
		        Atomic 
				{
		        Name = FelixServer6
		        Ports = 0 ; 1
		        Path = PhaseI/FelixServer.h
		        Description = Generates jobs. Distribution for the rate and jobSize are retrieved from the Flows assigned to this server
		        Graphic
		            {
		            Position = -6225 ; -10285
		            Dimension = 450 ; 435
		            Direction = Right
		            Color = 15
		            Icon = %datanetworks%generator.png
		            }
		        Parameters
		            {
		            }
		        }
		        Atomic 
				{
		        Name = FelixServer7
		        Ports = 0 ; 1
		        Path = PhaseI/FelixServer.h
		        Description = Generates jobs. Distribution for the rate and jobSize are retrieved from the Flows assigned to this server
		        Graphic
		            {
		            Position = -5475 ; -10285
		            Dimension = 450 ; 435
		            Direction = Right
		            Color = 15
		            Icon = %datanetworks%generator.png
		            }
		        Parameters
		            {
		            }
		        }
		        Atomic 
				{
		        Name = FelixServer8
		        Ports = 0 ; 1
		        Path = PhaseI/FelixServer.h
		        Description = Generates jobs. Distribution for the rate and jobSize are retrieved from the Flows assigned to this server
		        Graphic
		            {
		            Position = -4725 ; -10285
		            Dimension = 450 ; 435
		            Direction = Right
		            Color = 15
		            Icon = %datanetworks%generator.png
		            }
		        Parameters
		            {
		            }
		        }
		        Atomic
	            {
	            Name = Router9
	            Ports = 2 ; 1
	            Path = PhaseI/Router.h
	            Description = In0: Incomming packetsInN: Outgoing packets from a single flowDemultiplexes a single packet flow in N input output streams.Each output stream contains packets belonging to a single flow identifier.
	            Graphic
	                {
	                Position = -3975 ; -8505
	                Dimension = 600 ; 675
	                Direction = Down
	                Color = 15
	                Icon = %datanetworks%router.jpg
	                }
	            Parameters
	                {
	                }
	            }
	            Atomic
	            {
	            Name = Router10
	            Ports = 2 ; 1
	            Path = PhaseI/Router.h
	            Description = In0: Incomming packetsInN: Outgoing packets from a single flowDemultiplexes a single packet flow in N input output streams.Each output stream contains packets belonging to a single flow identifier.
	            Graphic
	                {
	                Position = -3225 ; -8505
	                Dimension = 600 ; 675
	                Direction = Down
	                Color = 15
	                Icon = %datanetworks%router.jpg
	                }
	            Parameters
	                {
	                }
	            }
	            Atomic
	            {
	            Name = Router11
	            Ports = 2 ; 1
	            Path = PhaseI/Router.h
	            Description = In0: Incomming packetsInN: Outgoing packets from a single flowDemultiplexes a single packet flow in N input output streams.Each output stream contains packets belonging to a single flow identifier.
	            Graphic
	                {
	                Position = -2475 ; -8505
	                Dimension = 600 ; 675
	                Direction = Down
	                Color = 15
	                Icon = %datanetworks%router.jpg
	                }
	            Parameters
	                {
	                }
	            }
	            Atomic
	            {
	            Name = Router12
	            Ports = 2 ; 1
	            Path = PhaseI/Router.h
	            Description = In0: Incomming packetsInN: Outgoing packets from a single flowDemultiplexes a single packet flow in N input output streams.Each output stream contains packets belonging to a single flow identifier.
	            Graphic
	                {
	                Position = -1725 ; -8505
	                Dimension = 600 ; 675
	                Direction = Down
	                Color = 15
	                Icon = %datanetworks%router.jpg
	                }
	            Parameters
	                {
	                }
	            }
	            Atomic
	            {
	            Name = Router13
	            Ports = 2 ; 1
	            Path = PhaseI/Router.h
	            Description = In0: Incomming packetsInN: Outgoing packets from a single flowDemultiplexes a single packet flow in N input output streams.Each output stream contains packets belonging to a single flow identifier.
	            Graphic
	                {
	                Position = -975 ; -8505
	                Dimension = 600 ; 675
	                Direction = Down
	                Color = 15
	                Icon = %datanetworks%router.jpg
	                }
	            Parameters
	                {
	                }
	            }
	            Atomic
	            {
	            Name = Router14
	            Ports = 2 ; 1
	            Path = PhaseI/Router.h
	            Description = In0: Incomming packetsInN: Outgoing packets from a single flowDemultiplexes a single packet flow in N input output streams.Each output stream contains packets belonging to a single flow identifier.
	            Graphic
	                {
	                Position = -225 ; -8505
	                Dimension = 600 ; 675
	                Direction = Down
	                Color = 15
	                Icon = %datanetworks%router.jpg
	                }
	            Parameters
	                {
	                }
	            }
	            Atomic
	            {
	            Name = Router15
	            Ports = 2 ; 1
	            Path = PhaseI/Router.h
	            Description = In0: Incomming packetsInN: Outgoing packets from a single flowDemultiplexes a single packet flow in N input output streams.Each output stream contains packets belonging to a single flow identifier.
	            Graphic
	                {
	                Position = 525 ; -8505
	                Dimension = 600 ; 675
	                Direction = Down
	                Color = 15
	                Icon = %datanetworks%router.jpg
	                }
	            Parameters
	                {
	                }
	            }
	            Coupled
	            {
	            Type = Coordinator
	            Name = Link16
	            Ports = 1; 1
	            Description = Coupled DEVS model
	            Graphic
	                {
	                Position = 1275; -9870
	                Dimension = 645; 705
	                Direction = Down
	                Color = 15
	                Icon = %datanetworks%ethernet.jpg
	                Window = 5000; 5000; 5000; 5000
	                }
	            Parameters
	                {
	                }
	            System
	                {
	                Inport
	                    {
	                    Name = Inport0
	                    CoupledPort = 1
	                    Description = 
	                    Graphic
	                        {
	                        Position = -4740 ; -3525
	                        Dimension = 480
	                        Direction = Right
	                        }
	                    }
	                Outport
	                    {
	                    Name = Outport0
	                    CoupledPort = 1
	                    Description = 
	                    Graphic
	                        {
	                        Position = -930 ; 2850
	                        Dimension = 360
	                        Direction = Right
	                        }
	                    }
	                Atomic
	                    {
	                    Name = InNICQueue
	                    Ports = 2 ; 2
	                    Path = PhaseI/NetworkQueue.h
	                    Description = In0 Incomming packets to queueIn1 Incoming signal to request dequeueOut0 Outgoing dequeued packetsOut1 Outgoing queue lenght informationQueues incoming packets and enqueues them as required by aexternal entity. FIFO Policy (FirstInFirstOut). Provides information its internal state.
	                    Graphic
	                        {
	                        Position = -3855 ; -1230
	                        Dimension = 675 ; 675
	                        Direction = Down
	                        Color = 15
	                        Icon = %datanetworks%queue.png
	                        }
	                    Parameters
	                        {
	                        MaxCapacity = Str; FelixNICQueue1.maxBuffer ; Queue Capacity in Bytes. (Use -1 for INF capacity)
	                        ForcedPeriod = Str; -1 ; Force minimum period to transition. Use -1 for INF
	                        }
	                    }
	                Atomic
	                    {
	                    Name = Link
	                    Ports = 1 ; 1
	                    Path = PhaseI/Link.h
	                    Description = Vector to scalar signal
	                    Graphic
	                        {
	                        Position = -3990 ; 585
	                        Dimension = 630 ; 630
	                        Direction = Down
	                        Color = 15
	                        Icon = %vectors%vec2scalar.svg
	                        }
	                    Parameters
	                        {
	                        link.capacity = Str; FelixLink.capacity ; Signal Index
	                        link.delay = Str; link.delay ; 
	                        }
	                    }
	                Point
	                    {
	                    ConectedLines = 3 ; 4 ; 5
	                    ConectedExtrems = Org ; Org ; Org
	                    Position = -3675 ; 1950
	                    }
	                Line
	                    {
	                    Source = Prt ;  1 ;  1 ; 0
	                    Sink = Cmp ;  1 ;  1 ; -1
	                    PointX = -4125 ; -3675 ; -3675
	                    PointY = -3525 ; -3525 ; -1365
	                    }
	                Line
	                    {
	                    Source = Cmp ;  1 ;  1 ; 0
	                    Sink = Cmp ;  2 ;  1 ; -1
	                    PointX = -3675 ; -3675 ; -3675
	                    PointY = -450 ; -450 ; 435
	                    }
	                Line
	                    {
	                    Source = Cmp ;  2 ;  1 ; 0
	                    Sink = Pnt ;  1 ; -1 ; 0
	                    PointX = -3675 ; -3675 ; -3675
	                    PointY = 1350 ; 1350 ; 1950
	                    }
	                Line
	                    {
	                    Source = Cmp ;  1 ;  2 ; -1
	                    Sink = Pnt ;  1 ; -1 ; 0
	                    PointX = -3375 ; -3375 ; -2325 ; -2325 ; -3675
	                    PointY = -1365 ; -1650 ; -1650 ; 1950 ; 1950
	                    }
	                Line
	                    {
	                    Source = Pnt ;  1 ; -1 ; 0
	                    Sink = Prt ;  2 ;  1 ; -1
	                    PointX = -3675 ; -3675 ; -1065 ; -1065
	                    PointY = 1950 ; 2775 ; 2775 ; 2850
	                    }
	                }
	            }
				Coupled
	            {
	            Type = Coordinator
	            Name = Link17
	            Ports = 1; 1
	            Description = Coupled DEVS model
	            Graphic
	                {
	                Position = 2025; -9870
	                Dimension = 645; 705
	                Direction = Down
	                Color = 15
	                Icon = %datanetworks%ethernet.jpg
	                Window = 5000; 5000; 5000; 5000
	                }
	            Parameters
	                {
	                }
	            System
	                {
	                Inport
	                    {
	                    Name = Inport0
	                    CoupledPort = 1
	                    Description = 
	                    Graphic
	                        {
	                        Position = -4740 ; -3525
	                        Dimension = 480
	                        Direction = Right
	                        }
	                    }
	                Outport
	                    {
	                    Name = Outport0
	                    CoupledPort = 1
	                    Description = 
	                    Graphic
	                        {
	                        Position = -930 ; 2850
	                        Dimension = 360
	                        Direction = Right
	                        }
	                    }
	                Atomic
	                    {
	                    Name = InNICQueue
	                    Ports = 2 ; 2
	                    Path = PhaseI/NetworkQueue.h
	                    Description = In0 Incomming packets to queueIn1 Incoming signal to request dequeueOut0 Outgoing dequeued packetsOut1 Outgoing queue lenght informationQueues incoming packets and enqueues them as required by aexternal entity. FIFO Policy (FirstInFirstOut). Provides information its internal state.
	                    Graphic
	                        {
	                        Position = -3855 ; -1230
	                        Dimension = 675 ; 675
	                        Direction = Down
	                        Color = 15
	                        Icon = %datanetworks%queue.png
	                        }
	                    Parameters
	                        {
	                        MaxCapacity = Str; FelixNICQueue1.maxBuffer ; Queue Capacity in Bytes. (Use -1 for INF capacity)
	                        ForcedPeriod = Str; -1 ; Force minimum period to transition. Use -1 for INF
	                        }
	                    }
	                Atomic
	                    {
	                    Name = Link
	                    Ports = 1 ; 1
	                    Path = PhaseI/Link.h
	                    Description = Vector to scalar signal
	                    Graphic
	                        {
	                        Position = -3990 ; 585
	                        Dimension = 630 ; 630
	                        Direction = Down
	                        Color = 15
	                        Icon = %vectors%vec2scalar.svg
	                        }
	                    Parameters
	                        {
	                        link.capacity = Str; FelixLink.capacity ; Signal Index
	                        link.delay = Str; link.delay ; 
	                        }
	                    }
	                Point
	                    {
	                    ConectedLines = 3 ; 4 ; 5
	                    ConectedExtrems = Org ; Org ; Org
	                    Position = -3675 ; 1950
	                    }
	                Line
	                    {
	                    Source = Prt ;  1 ;  1 ; 0
	                    Sink = Cmp ;  1 ;  1 ; -1
	                    PointX = -4125 ; -3675 ; -3675
	                    PointY = -3525 ; -3525 ; -1365
	                    }
	                Line
	                    {
	                    Source = Cmp ;  1 ;  1 ; 0
	                    Sink = Cmp ;  2 ;  1 ; -1
	                    PointX = -3675 ; -3675 ; -3675
	                    PointY = -450 ; -450 ; 435
	                    }
	                Line
	                    {
	                    Source = Cmp ;  2 ;  1 ; 0
	                    Sink = Pnt ;  1 ; -1 ; 0
	                    PointX = -3675 ; -3675 ; -3675
	                    PointY = 1350 ; 1350 ; 1950
	                    }
	                Line
	                    {
	                    Source = Cmp ;  1 ;  2 ; -1
	                    Sink = Pnt ;  1 ; -1 ; 0
	                    PointX = -3375 ; -3375 ; -2325 ; -2325 ; -3675
	                    PointY = -1365 ; -1650 ; -1650 ; 1950 ; 1950
	                    }
	                Line
	                    {
	                    Source = Pnt ;  1 ; -1 ; 0
	                    Sink = Prt ;  2 ;  1 ; -1
	                    PointX = -3675 ; -3675 ; -1065 ; -1065
	                    PointY = 1950 ; 2775 ; 2775 ; 2850
	                    }
	                }
	            }
				Coupled
	            {
	            Type = Coordinator
	            Name = Link18
	            Ports = 1; 1
	            Description = Coupled DEVS model
	            Graphic
	                {
	                Position = 2775; -9870
	                Dimension = 645; 705
	                Direction = Down
	                Color = 15
	                Icon = %datanetworks%ethernet.jpg
	                Window = 5000; 5000; 5000; 5000
	                }
	            Parameters
	                {
	                }
	            System
	                {
	                Inport
	                    {
	                    Name = Inport0
	                    CoupledPort = 1
	                    Description = 
	                    Graphic
	                        {
	                        Position = -4740 ; -3525
	                        Dimension = 480
	                        Direction = Right
	                        }
	                    }
	                Outport
	                    {
	                    Name = Outport0
	                    CoupledPort = 1
	                    Description = 
	                    Graphic
	                        {
	                        Position = -930 ; 2850
	                        Dimension = 360
	                        Direction = Right
	                        }
	                    }
	                Atomic
	                    {
	                    Name = InNICQueue
	                    Ports = 2 ; 2
	                    Path = PhaseI/NetworkQueue.h
	                    Description = In0 Incomming packets to queueIn1 Incoming signal to request dequeueOut0 Outgoing dequeued packetsOut1 Outgoing queue lenght informationQueues incoming packets and enqueues them as required by aexternal entity. FIFO Policy (FirstInFirstOut). Provides information its internal state.
	                    Graphic
	                        {
	                        Position = -3855 ; -1230
	                        Dimension = 675 ; 675
	                        Direction = Down
	                        Color = 15
	                        Icon = %datanetworks%queue.png
	                        }
	                    Parameters
	                        {
	                        MaxCapacity = Str; FelixNICQueue1.maxBuffer ; Queue Capacity in Bytes. (Use -1 for INF capacity)
	                        ForcedPeriod = Str; -1 ; Force minimum period to transition. Use -1 for INF
	                        }
	                    }
	                Atomic
	                    {
	                    Name = Link
	                    Ports = 1 ; 1
	                    Path = PhaseI/Link.h
	                    Description = Vector to scalar signal
	                    Graphic
	                        {
	                        Position = -3990 ; 585
	                        Dimension = 630 ; 630
	                        Direction = Down
	                        Color = 15
	                        Icon = %vectors%vec2scalar.svg
	                        }
	                    Parameters
	                        {
	                        link.capacity = Str; FelixLink.capacity ; Signal Index
	                        link.delay = Str; link.delay ; 
	                        }
	                    }
	                Point
	                    {
	                    ConectedLines = 3 ; 4 ; 5
	                    ConectedExtrems = Org ; Org ; Org
	                    Position = -3675 ; 1950
	                    }
	                Line
	                    {
	                    Source = Prt ;  1 ;  1 ; 0
	                    Sink = Cmp ;  1 ;  1 ; -1
	                    PointX = -4125 ; -3675 ; -3675
	                    PointY = -3525 ; -3525 ; -1365
	                    }
	                Line
	                    {
	                    Source = Cmp ;  1 ;  1 ; 0
	                    Sink = Cmp ;  2 ;  1 ; -1
	                    PointX = -3675 ; -3675 ; -3675
	                    PointY = -450 ; -450 ; 435
	                    }
	                Line
	                    {
	                    Source = Cmp ;  2 ;  1 ; 0
	                    Sink = Pnt ;  1 ; -1 ; 0
	                    PointX = -3675 ; -3675 ; -3675
	                    PointY = 1350 ; 1350 ; 1950
	                    }
	                Line
	                    {
	                    Source = Cmp ;  1 ;  2 ; -1
	                    Sink = Pnt ;  1 ; -1 ; 0
	                    PointX = -3375 ; -3375 ; -2325 ; -2325 ; -3675
	                    PointY = -1365 ; -1650 ; -1650 ; 1950 ; 1950
	                    }
	                Line
	                    {
	                    Source = Pnt ;  1 ; -1 ; 0
	                    Sink = Prt ;  2 ;  1 ; -1
	                    PointX = -3675 ; -3675 ; -1065 ; -1065
	                    PointY = 1950 ; 2775 ; 2775 ; 2850
	                    }
	                }
	            }
				Coupled
	            {
	            Type = Coordinator
	            Name = Link19
	            Ports = 1; 1
	            Description = Coupled DEVS model
	            Graphic
	                {
	                Position = 3525; -9870
	                Dimension = 645; 705
	                Direction = Down
	                Color = 15
	                Icon = %datanetworks%ethernet.jpg
	                Window = 5000; 5000; 5000; 5000
	                }
	            Parameters
	                {
	                }
	            System
	                {
	                Inport
	                    {
	                    Name = Inport0
	                    CoupledPort = 1
	                    Description = 
	                    Graphic
	                        {
	                        Position = -4740 ; -3525
	                        Dimension = 480
	                        Direction = Right
	                        }
	                    }
	                Outport
	                    {
	                    Name = Outport0
	                    CoupledPort = 1
	                    Description = 
	                    Graphic
	                        {
	                        Position = -930 ; 2850
	                        Dimension = 360
	                        Direction = Right
	                        }
	                    }
	                Atomic
	                    {
	                    Name = InNICQueue
	                    Ports = 2 ; 2
	                    Path = PhaseI/NetworkQueue.h
	                    Description = In0 Incomming packets to queueIn1 Incoming signal to request dequeueOut0 Outgoing dequeued packetsOut1 Outgoing queue lenght informationQueues incoming packets and enqueues them as required by aexternal entity. FIFO Policy (FirstInFirstOut). Provides information its internal state.
	                    Graphic
	                        {
	                        Position = -3855 ; -1230
	                        Dimension = 675 ; 675
	                        Direction = Down
	                        Color = 15
	                        Icon = %datanetworks%queue.png
	                        }
	                    Parameters
	                        {
	                        MaxCapacity = Str; FelixNICQueue1.maxBuffer ; Queue Capacity in Bytes. (Use -1 for INF capacity)
	                        ForcedPeriod = Str; -1 ; Force minimum period to transition. Use -1 for INF
	                        }
	                    }
	                Atomic
	                    {
	                    Name = Link
	                    Ports = 1 ; 1
	                    Path = PhaseI/Link.h
	                    Description = Vector to scalar signal
	                    Graphic
	                        {
	                        Position = -3990 ; 585
	                        Dimension = 630 ; 630
	                        Direction = Down
	                        Color = 15
	                        Icon = %vectors%vec2scalar.svg
	                        }
	                    Parameters
	                        {
	                        link.capacity = Str; FelixLink.capacity ; Signal Index
	                        link.delay = Str; link.delay ; 
	                        }
	                    }
	                Point
	                    {
	                    ConectedLines = 3 ; 4 ; 5
	                    ConectedExtrems = Org ; Org ; Org
	                    Position = -3675 ; 1950
	                    }
	                Line
	                    {
	                    Source = Prt ;  1 ;  1 ; 0
	                    Sink = Cmp ;  1 ;  1 ; -1
	                    PointX = -4125 ; -3675 ; -3675
	                    PointY = -3525 ; -3525 ; -1365
	                    }
	                Line
	                    {
	                    Source = Cmp ;  1 ;  1 ; 0
	                    Sink = Cmp ;  2 ;  1 ; -1
	                    PointX = -3675 ; -3675 ; -3675
	                    PointY = -450 ; -450 ; 435
	                    }
	                Line
	                    {
	                    Source = Cmp ;  2 ;  1 ; 0
	                    Sink = Pnt ;  1 ; -1 ; 0
	                    PointX = -3675 ; -3675 ; -3675
	                    PointY = 1350 ; 1350 ; 1950
	                    }
	                Line
	                    {
	                    Source = Cmp ;  1 ;  2 ; -1
	                    Sink = Pnt ;  1 ; -1 ; 0
	                    PointX = -3375 ; -3375 ; -2325 ; -2325 ; -3675
	                    PointY = -1365 ; -1650 ; -1650 ; 1950 ; 1950
	                    }
	                Line
	                    {
	                    Source = Pnt ;  1 ; -1 ; 0
	                    Sink = Prt ;  2 ;  1 ; -1
	                    PointX = -3675 ; -3675 ; -1065 ; -1065
	                    PointY = 1950 ; 2775 ; 2775 ; 2850
	                    }
	                }
	            }
				Coupled
	            {
	            Type = Coordinator
	            Name = Link20
	            Ports = 1; 1
	            Description = Coupled DEVS model
	            Graphic
	                {
	                Position = 4275; -9870
	                Dimension = 645; 705
	                Direction = Down
	                Color = 15
	                Icon = %datanetworks%ethernet.jpg
	                Window = 5000; 5000; 5000; 5000
	                }
	            Parameters
	                {
	                }
	            System
	                {
	                Inport
	                    {
	                    Name = Inport0
	                    CoupledPort = 1
	                    Description = 
	                    Graphic
	                        {
	                        Position = -4740 ; -3525
	                        Dimension = 480
	                        Direction = Right
	                        }
	                    }
	                Outport
	                    {
	                    Name = Outport0
	                    CoupledPort = 1
	                    Description = 
	                    Graphic
	                        {
	                        Position = -930 ; 2850
	                        Dimension = 360
	                        Direction = Right
	                        }
	                    }
	                Atomic
	                    {
	                    Name = InNICQueue
	                    Ports = 2 ; 2
	                    Path = PhaseI/NetworkQueue.h
	                    Description = In0 Incomming packets to queueIn1 Incoming signal to request dequeueOut0 Outgoing dequeued packetsOut1 Outgoing queue lenght informationQueues incoming packets and enqueues them as required by aexternal entity. FIFO Policy (FirstInFirstOut). Provides information its internal state.
	                    Graphic
	                        {
	                        Position = -3855 ; -1230
	                        Dimension = 675 ; 675
	                        Direction = Down
	                        Color = 15
	                        Icon = %datanetworks%queue.png
	                        }
	                    Parameters
	                        {
	                        MaxCapacity = Str; FelixNICQueue1.maxBuffer ; Queue Capacity in Bytes. (Use -1 for INF capacity)
	                        ForcedPeriod = Str; -1 ; Force minimum period to transition. Use -1 for INF
	                        }
	                    }
	                Atomic
	                    {
	                    Name = Link
	                    Ports = 1 ; 1
	                    Path = PhaseI/Link.h
	                    Description = Vector to scalar signal
	                    Graphic
	                        {
	                        Position = -3990 ; 585
	                        Dimension = 630 ; 630
	                        Direction = Down
	                        Color = 15
	                        Icon = %vectors%vec2scalar.svg
	                        }
	                    Parameters
	                        {
	                        link.capacity = Str; FelixLink.capacity ; Signal Index
	                        link.delay = Str; link.delay ; 
	                        }
	                    }
	                Point
	                    {
	                    ConectedLines = 3 ; 4 ; 5
	                    ConectedExtrems = Org ; Org ; Org
	                    Position = -3675 ; 1950
	                    }
	                Line
	                    {
	                    Source = Prt ;  1 ;  1 ; 0
	                    Sink = Cmp ;  1 ;  1 ; -1
	                    PointX = -4125 ; -3675 ; -3675
	                    PointY = -3525 ; -3525 ; -1365
	                    }
	                Line
	                    {
	                    Source = Cmp ;  1 ;  1 ; 0
	                    Sink = Cmp ;  2 ;  1 ; -1
	                    PointX = -3675 ; -3675 ; -3675
	                    PointY = -450 ; -450 ; 435
	                    }
	                Line
	                    {
	                    Source = Cmp ;  2 ;  1 ; 0
	                    Sink = Pnt ;  1 ; -1 ; 0
	                    PointX = -3675 ; -3675 ; -3675
	                    PointY = 1350 ; 1350 ; 1950
	                    }
	                Line
	                    {
	                    Source = Cmp ;  1 ;  2 ; -1
	                    Sink = Pnt ;  1 ; -1 ; 0
	                    PointX = -3375 ; -3375 ; -2325 ; -2325 ; -3675
	                    PointY = -1365 ; -1650 ; -1650 ; 1950 ; 1950
	                    }
	                Line
	                    {
	                    Source = Pnt ;  1 ; -1 ; 0
	                    Sink = Prt ;  2 ;  1 ; -1
	                    PointX = -3675 ; -3675 ; -1065 ; -1065
	                    PointY = 1950 ; 2775 ; 2775 ; 2850
	                    }
	                }
	            }
				Coupled
	            {
	            Type = Coordinator
	            Name = Link21
	            Ports = 1; 1
	            Description = Coupled DEVS model
	            Graphic
	                {
	                Position = 5025; -9870
	                Dimension = 645; 705
	                Direction = Down
	                Color = 15
	                Icon = %datanetworks%ethernet.jpg
	                Window = 5000; 5000; 5000; 5000
	                }
	            Parameters
	                {
	                }
	            System
	                {
	                Inport
	                    {
	                    Name = Inport0
	                    CoupledPort = 1
	                    Description = 
	                    Graphic
	                        {
	                        Position = -4740 ; -3525
	                        Dimension = 480
	                        Direction = Right
	                        }
	                    }
	                Outport
	                    {
	                    Name = Outport0
	                    CoupledPort = 1
	                    Description = 
	                    Graphic
	                        {
	                        Position = -930 ; 2850
	                        Dimension = 360
	                        Direction = Right
	                        }
	                    }
	                Atomic
	                    {
	                    Name = InNICQueue
	                    Ports = 2 ; 2
	                    Path = PhaseI/NetworkQueue.h
	                    Description = In0 Incomming packets to queueIn1 Incoming signal to request dequeueOut0 Outgoing dequeued packetsOut1 Outgoing queue lenght informationQueues incoming packets and enqueues them as required by aexternal entity. FIFO Policy (FirstInFirstOut). Provides information its internal state.
	                    Graphic
	                        {
	                        Position = -3855 ; -1230
	                        Dimension = 675 ; 675
	                        Direction = Down
	                        Color = 15
	                        Icon = %datanetworks%queue.png
	                        }
	                    Parameters
	                        {
	                        MaxCapacity = Str; FelixNICQueue1.maxBuffer ; Queue Capacity in Bytes. (Use -1 for INF capacity)
	                        ForcedPeriod = Str; -1 ; Force minimum period to transition. Use -1 for INF
	                        }
	                    }
	                Atomic
	                    {
	                    Name = Link
	                    Ports = 1 ; 1
	                    Path = PhaseI/Link.h
	                    Description = Vector to scalar signal
	                    Graphic
	                        {
	                        Position = -3990 ; 585
	                        Dimension = 630 ; 630
	                        Direction = Down
	                        Color = 15
	                        Icon = %vectors%vec2scalar.svg
	                        }
	                    Parameters
	                        {
	                        link.capacity = Str; FelixLink.capacity ; Signal Index
	                        link.delay = Str; link.delay ; 
	                        }
	                    }
	                Point
	                    {
	                    ConectedLines = 3 ; 4 ; 5
	                    ConectedExtrems = Org ; Org ; Org
	                    Position = -3675 ; 1950
	                    }
	                Line
	                    {
	                    Source = Prt ;  1 ;  1 ; 0
	                    Sink = Cmp ;  1 ;  1 ; -1
	                    PointX = -4125 ; -3675 ; -3675
	                    PointY = -3525 ; -3525 ; -1365
	                    }
	                Line
	                    {
	                    Source = Cmp ;  1 ;  1 ; 0
	                    Sink = Cmp ;  2 ;  1 ; -1
	                    PointX = -3675 ; -3675 ; -3675
	                    PointY = -450 ; -450 ; 435
	                    }
	                Line
	                    {
	                    Source = Cmp ;  2 ;  1 ; 0
	                    Sink = Pnt ;  1 ; -1 ; 0
	                    PointX = -3675 ; -3675 ; -3675
	                    PointY = 1350 ; 1350 ; 1950
	                    }
	                Line
	                    {
	                    Source = Cmp ;  1 ;  2 ; -1
	                    Sink = Pnt ;  1 ; -1 ; 0
	                    PointX = -3375 ; -3375 ; -2325 ; -2325 ; -3675
	                    PointY = -1365 ; -1650 ; -1650 ; 1950 ; 1950
	                    }
	                Line
	                    {
	                    Source = Pnt ;  1 ; -1 ; 0
	                    Sink = Prt ;  2 ;  1 ; -1
	                    PointX = -3675 ; -3675 ; -1065 ; -1065
	                    PointY = 1950 ; 2775 ; 2775 ; 2850
	                    }
	                }
	            }
				Coupled
	            {
	            Type = Coordinator
	            Name = Link22
	            Ports = 1; 1
	            Description = Coupled DEVS model
	            Graphic
	                {
	                Position = 5775; -9870
	                Dimension = 645; 705
	                Direction = Down
	                Color = 15
	                Icon = %datanetworks%ethernet.jpg
	                Window = 5000; 5000; 5000; 5000
	                }
	            Parameters
	                {
	                }
	            System
	                {
	                Inport
	                    {
	                    Name = Inport0
	                    CoupledPort = 1
	                    Description = 
	                    Graphic
	                        {
	                        Position = -4740 ; -3525
	                        Dimension = 480
	                        Direction = Right
	                        }
	                    }
	                Outport
	                    {
	                    Name = Outport0
	                    CoupledPort = 1
	                    Description = 
	                    Graphic
	                        {
	                        Position = -930 ; 2850
	                        Dimension = 360
	                        Direction = Right
	                        }
	                    }
	                Atomic
	                    {
	                    Name = InNICQueue
	                    Ports = 2 ; 2
	                    Path = PhaseI/NetworkQueue.h
	                    Description = In0 Incomming packets to queueIn1 Incoming signal to request dequeueOut0 Outgoing dequeued packetsOut1 Outgoing queue lenght informationQueues incoming packets and enqueues them as required by aexternal entity. FIFO Policy (FirstInFirstOut). Provides information its internal state.
	                    Graphic
	                        {
	                        Position = -3855 ; -1230
	                        Dimension = 675 ; 675
	                        Direction = Down
	                        Color = 15
	                        Icon = %datanetworks%queue.png
	                        }
	                    Parameters
	                        {
	                        MaxCapacity = Str; FelixNICQueue1.maxBuffer ; Queue Capacity in Bytes. (Use -1 for INF capacity)
	                        ForcedPeriod = Str; -1 ; Force minimum period to transition. Use -1 for INF
	                        }
	                    }
	                Atomic
	                    {
	                    Name = Link
	                    Ports = 1 ; 1
	                    Path = PhaseI/Link.h
	                    Description = Vector to scalar signal
	                    Graphic
	                        {
	                        Position = -3990 ; 585
	                        Dimension = 630 ; 630
	                        Direction = Down
	                        Color = 15
	                        Icon = %vectors%vec2scalar.svg
	                        }
	                    Parameters
	                        {
	                        link.capacity = Str; FelixLink.capacity ; Signal Index
	                        link.delay = Str; link.delay ; 
	                        }
	                    }
	                Point
	                    {
	                    ConectedLines = 3 ; 4 ; 5
	                    ConectedExtrems = Org ; Org ; Org
	                    Position = -3675 ; 1950
	                    }
	                Line
	                    {
	                    Source = Prt ;  1 ;  1 ; 0
	                    Sink = Cmp ;  1 ;  1 ; -1
	                    PointX = -4125 ; -3675 ; -3675
	                    PointY = -3525 ; -3525 ; -1365
	                    }
	                Line
	                    {
	                    Source = Cmp ;  1 ;  1 ; 0
	                    Sink = Cmp ;  2 ;  1 ; -1
	                    PointX = -3675 ; -3675 ; -3675
	                    PointY = -450 ; -450 ; 435
	                    }
	                Line
	                    {
	                    Source = Cmp ;  2 ;  1 ; 0
	                    Sink = Pnt ;  1 ; -1 ; 0
	                    PointX = -3675 ; -3675 ; -3675
	                    PointY = 1350 ; 1350 ; 1950
	                    }
	                Line
	                    {
	                    Source = Cmp ;  1 ;  2 ; -1
	                    Sink = Pnt ;  1 ; -1 ; 0
	                    PointX = -3375 ; -3375 ; -2325 ; -2325 ; -3675
	                    PointY = -1365 ; -1650 ; -1650 ; 1950 ; 1950
	                    }
	                Line
	                    {
	                    Source = Pnt ;  1 ; -1 ; 0
	                    Sink = Prt ;  2 ;  1 ; -1
	                    PointX = -3675 ; -3675 ; -1065 ; -1065
	                    PointY = 1950 ; 2775 ; 2775 ; 2850
	                    }
	                }
	            }
				Coupled
	            {
	            Type = Coordinator
	            Name = Link23
	            Ports = 1; 1
	            Description = Coupled DEVS model
	            Graphic
	                {
	                Position = 6525; -9870
	                Dimension = 645; 705
	                Direction = Down
	                Color = 15
	                Icon = %datanetworks%ethernet.jpg
	                Window = 5000; 5000; 5000; 5000
	                }
	            Parameters
	                {
	                }
	            System
	                {
	                Inport
	                    {
	                    Name = Inport0
	                    CoupledPort = 1
	                    Description = 
	                    Graphic
	                        {
	                        Position = -4740 ; -3525
	                        Dimension = 480
	                        Direction = Right
	                        }
	                    }
	                Outport
	                    {
	                    Name = Outport0
	                    CoupledPort = 1
	                    Description = 
	                    Graphic
	                        {
	                        Position = -930 ; 2850
	                        Dimension = 360
	                        Direction = Right
	                        }
	                    }
	                Atomic
	                    {
	                    Name = InNICQueue
	                    Ports = 2 ; 2
	                    Path = PhaseI/NetworkQueue.h
	                    Description = In0 Incomming packets to queueIn1 Incoming signal to request dequeueOut0 Outgoing dequeued packetsOut1 Outgoing queue lenght informationQueues incoming packets and enqueues them as required by aexternal entity. FIFO Policy (FirstInFirstOut). Provides information its internal state.
	                    Graphic
	                        {
	                        Position = -3855 ; -1230
	                        Dimension = 675 ; 675
	                        Direction = Down
	                        Color = 15
	                        Icon = %datanetworks%queue.png
	                        }
	                    Parameters
	                        {
	                        MaxCapacity = Str; FelixNICQueue1.maxBuffer ; Queue Capacity in Bytes. (Use -1 for INF capacity)
	                        ForcedPeriod = Str; -1 ; Force minimum period to transition. Use -1 for INF
	                        }
	                    }
	                Atomic
	                    {
	                    Name = Link
	                    Ports = 1 ; 1
	                    Path = PhaseI/Link.h
	                    Description = Vector to scalar signal
	                    Graphic
	                        {
	                        Position = -3990 ; 585
	                        Dimension = 630 ; 630
	                        Direction = Down
	                        Color = 15
	                        Icon = %vectors%vec2scalar.svg
	                        }
	                    Parameters
	                        {
	                        link.capacity = Str; FelixLink.capacity ; Signal Index
	                        link.delay = Str; link.delay ; 
	                        }
	                    }
	                Point
	                    {
	                    ConectedLines = 3 ; 4 ; 5
	                    ConectedExtrems = Org ; Org ; Org
	                    Position = -3675 ; 1950
	                    }
	                Line
	                    {
	                    Source = Prt ;  1 ;  1 ; 0
	                    Sink = Cmp ;  1 ;  1 ; -1
	                    PointX = -4125 ; -3675 ; -3675
	                    PointY = -3525 ; -3525 ; -1365
	                    }
	                Line
	                    {
	                    Source = Cmp ;  1 ;  1 ; 0
	                    Sink = Cmp ;  2 ;  1 ; -1
	                    PointX = -3675 ; -3675 ; -3675
	                    PointY = -450 ; -450 ; 435
	                    }
	                Line
	                    {
	                    Source = Cmp ;  2 ;  1 ; 0
	                    Sink = Pnt ;  1 ; -1 ; 0
	                    PointX = -3675 ; -3675 ; -3675
	                    PointY = 1350 ; 1350 ; 1950
	                    }
	                Line
	                    {
	                    Source = Cmp ;  1 ;  2 ; -1
	                    Sink = Pnt ;  1 ; -1 ; 0
	                    PointX = -3375 ; -3375 ; -2325 ; -2325 ; -3675
	                    PointY = -1365 ; -1650 ; -1650 ; 1950 ; 1950
	                    }
	                Line
	                    {
	                    Source = Pnt ;  1 ; -1 ; 0
	                    Sink = Prt ;  2 ;  1 ; -1
	                    PointX = -3675 ; -3675 ; -1065 ; -1065
	                    PointY = 1950 ; 2775 ; 2775 ; 2850
	                    }
	                }
	            }
				Coupled
	            {
	            Type = Coordinator
	            Name = Link24
	            Ports = 1; 1
	            Description = Coupled DEVS model
	            Graphic
	                {
	                Position = 7275; -9870
	                Dimension = 645; 705
	                Direction = Down
	                Color = 15
	                Icon = %datanetworks%ethernet.jpg
	                Window = 5000; 5000; 5000; 5000
	                }
	            Parameters
	                {
	                }
	            System
	                {
	                Inport
	                    {
	                    Name = Inport0
	                    CoupledPort = 1
	                    Description = 
	                    Graphic
	                        {
	                        Position = -4740 ; -3525
	                        Dimension = 480
	                        Direction = Right
	                        }
	                    }
	                Outport
	                    {
	                    Name = Outport0
	                    CoupledPort = 1
	                    Description = 
	                    Graphic
	                        {
	                        Position = -930 ; 2850
	                        Dimension = 360
	                        Direction = Right
	                        }
	                    }
	                Atomic
	                    {
	                    Name = InNICQueue
	                    Ports = 2 ; 2
	                    Path = PhaseI/NetworkQueue.h
	                    Description = In0 Incomming packets to queueIn1 Incoming signal to request dequeueOut0 Outgoing dequeued packetsOut1 Outgoing queue lenght informationQueues incoming packets and enqueues them as required by aexternal entity. FIFO Policy (FirstInFirstOut). Provides information its internal state.
	                    Graphic
	                        {
	                        Position = -3855 ; -1230
	                        Dimension = 675 ; 675
	                        Direction = Down
	                        Color = 15
	                        Icon = %datanetworks%queue.png
	                        }
	                    Parameters
	                        {
	                        MaxCapacity = Str; FelixNICQueue1.maxBuffer ; Queue Capacity in Bytes. (Use -1 for INF capacity)
	                        ForcedPeriod = Str; -1 ; Force minimum period to transition. Use -1 for INF
	                        }
	                    }
	                Atomic
	                    {
	                    Name = Link
	                    Ports = 1 ; 1
	                    Path = PhaseI/Link.h
	                    Description = Vector to scalar signal
	                    Graphic
	                        {
	                        Position = -3990 ; 585
	                        Dimension = 630 ; 630
	                        Direction = Down
	                        Color = 15
	                        Icon = %vectors%vec2scalar.svg
	                        }
	                    Parameters
	                        {
	                        link.capacity = Str; FelixLink.capacity ; Signal Index
	                        link.delay = Str; link.delay ; 
	                        }
	                    }
	                Point
	                    {
	                    ConectedLines = 3 ; 4 ; 5
	                    ConectedExtrems = Org ; Org ; Org
	                    Position = -3675 ; 1950
	                    }
	                Line
	                    {
	                    Source = Prt ;  1 ;  1 ; 0
	                    Sink = Cmp ;  1 ;  1 ; -1
	                    PointX = -4125 ; -3675 ; -3675
	                    PointY = -3525 ; -3525 ; -1365
	                    }
	                Line
	                    {
	                    Source = Cmp ;  1 ;  1 ; 0
	                    Sink = Cmp ;  2 ;  1 ; -1
	                    PointX = -3675 ; -3675 ; -3675
	                    PointY = -450 ; -450 ; 435
	                    }
	                Line
	                    {
	                    Source = Cmp ;  2 ;  1 ; 0
	                    Sink = Pnt ;  1 ; -1 ; 0
	                    PointX = -3675 ; -3675 ; -3675
	                    PointY = 1350 ; 1350 ; 1950
	                    }
	                Line
	                    {
	                    Source = Cmp ;  1 ;  2 ; -1
	                    Sink = Pnt ;  1 ; -1 ; 0
	                    PointX = -3375 ; -3375 ; -2325 ; -2325 ; -3675
	                    PointY = -1365 ; -1650 ; -1650 ; 1950 ; 1950
	                    }
	                Line
	                    {
	                    Source = Pnt ;  1 ; -1 ; 0
	                    Sink = Prt ;  2 ;  1 ; -1
	                    PointX = -3675 ; -3675 ; -1065 ; -1065
	                    PointY = 1950 ; 2775 ; 2775 ; 2850
	                    }
	                }
	            }
				Coupled
	            {
	            Type = Coordinator
	            Name = Link25
	            Ports = 1; 1
	            Description = Coupled DEVS model
	            Graphic
	                {
	                Position = 8025; -9870
	                Dimension = 645; 705
	                Direction = Down
	                Color = 15
	                Icon = %datanetworks%ethernet.jpg
	                Window = 5000; 5000; 5000; 5000
	                }
	            Parameters
	                {
	                }
	            System
	                {
	                Inport
	                    {
	                    Name = Inport0
	                    CoupledPort = 1
	                    Description = 
	                    Graphic
	                        {
	                        Position = -4740 ; -3525
	                        Dimension = 480
	                        Direction = Right
	                        }
	                    }
	                Outport
	                    {
	                    Name = Outport0
	                    CoupledPort = 1
	                    Description = 
	                    Graphic
	                        {
	                        Position = -930 ; 2850
	                        Dimension = 360
	                        Direction = Right
	                        }
	                    }
	                Atomic
	                    {
	                    Name = InNICQueue
	                    Ports = 2 ; 2
	                    Path = PhaseI/NetworkQueue.h
	                    Description = In0 Incomming packets to queueIn1 Incoming signal to request dequeueOut0 Outgoing dequeued packetsOut1 Outgoing queue lenght informationQueues incoming packets and enqueues them as required by aexternal entity. FIFO Policy (FirstInFirstOut). Provides information its internal state.
	                    Graphic
	                        {
	                        Position = -3855 ; -1230
	                        Dimension = 675 ; 675
	                        Direction = Down
	                        Color = 15
	                        Icon = %datanetworks%queue.png
	                        }
	                    Parameters
	                        {
	                        MaxCapacity = Str; FelixNICQueue1.maxBuffer ; Queue Capacity in Bytes. (Use -1 for INF capacity)
	                        ForcedPeriod = Str; -1 ; Force minimum period to transition. Use -1 for INF
	                        }
	                    }
	                Atomic
	                    {
	                    Name = Link
	                    Ports = 1 ; 1
	                    Path = PhaseI/Link.h
	                    Description = Vector to scalar signal
	                    Graphic
	                        {
	                        Position = -3990 ; 585
	                        Dimension = 630 ; 630
	                        Direction = Down
	                        Color = 15
	                        Icon = %vectors%vec2scalar.svg
	                        }
	                    Parameters
	                        {
	                        link.capacity = Str; FelixLink.capacity ; Signal Index
	                        link.delay = Str; link.delay ; 
	                        }
	                    }
	                Point
	                    {
	                    ConectedLines = 3 ; 4 ; 5
	                    ConectedExtrems = Org ; Org ; Org
	                    Position = -3675 ; 1950
	                    }
	                Line
	                    {
	                    Source = Prt ;  1 ;  1 ; 0
	                    Sink = Cmp ;  1 ;  1 ; -1
	                    PointX = -4125 ; -3675 ; -3675
	                    PointY = -3525 ; -3525 ; -1365
	                    }
	                Line
	                    {
	                    Source = Cmp ;  1 ;  1 ; 0
	                    Sink = Cmp ;  2 ;  1 ; -1
	                    PointX = -3675 ; -3675 ; -3675
	                    PointY = -450 ; -450 ; 435
	                    }
	                Line
	                    {
	                    Source = Cmp ;  2 ;  1 ; 0
	                    Sink = Pnt ;  1 ; -1 ; 0
	                    PointX = -3675 ; -3675 ; -3675
	                    PointY = 1350 ; 1350 ; 1950
	                    }
	                Line
	                    {
	                    Source = Cmp ;  1 ;  2 ; -1
	                    Sink = Pnt ;  1 ; -1 ; 0
	                    PointX = -3375 ; -3375 ; -2325 ; -2325 ; -3675
	                    PointY = -1365 ; -1650 ; -1650 ; 1950 ; 1950
	                    }
	                Line
	                    {
	                    Source = Pnt ;  1 ; -1 ; 0
	                    Sink = Prt ;  2 ;  1 ; -1
	                    PointX = -3675 ; -3675 ; -1065 ; -1065
	                    PointY = 1950 ; 2775 ; 2775 ; 2850
	                    }
	                }
	            }
				Coupled
	            {
	            Type = Coordinator
	            Name = Link26
	            Ports = 1; 1
	            Description = Coupled DEVS model
	            Graphic
	                {
	                Position = 8775; -9870
	                Dimension = 645; 705
	                Direction = Down
	                Color = 15
	                Icon = %datanetworks%ethernet.jpg
	                Window = 5000; 5000; 5000; 5000
	                }
	            Parameters
	                {
	                }
	            System
	                {
	                Inport
	                    {
	                    Name = Inport0
	                    CoupledPort = 1
	                    Description = 
	                    Graphic
	                        {
	                        Position = -4740 ; -3525
	                        Dimension = 480
	                        Direction = Right
	                        }
	                    }
	                Outport
	                    {
	                    Name = Outport0
	                    CoupledPort = 1
	                    Description = 
	                    Graphic
	                        {
	                        Position = -930 ; 2850
	                        Dimension = 360
	                        Direction = Right
	                        }
	                    }
	                Atomic
	                    {
	                    Name = InNICQueue
	                    Ports = 2 ; 2
	                    Path = PhaseI/NetworkQueue.h
	                    Description = In0 Incomming packets to queueIn1 Incoming signal to request dequeueOut0 Outgoing dequeued packetsOut1 Outgoing queue lenght informationQueues incoming packets and enqueues them as required by aexternal entity. FIFO Policy (FirstInFirstOut). Provides information its internal state.
	                    Graphic
	                        {
	                        Position = -3855 ; -1230
	                        Dimension = 675 ; 675
	                        Direction = Down
	                        Color = 15
	                        Icon = %datanetworks%queue.png
	                        }
	                    Parameters
	                        {
	                        MaxCapacity = Str; FelixNICQueue1.maxBuffer ; Queue Capacity in Bytes. (Use -1 for INF capacity)
	                        ForcedPeriod = Str; -1 ; Force minimum period to transition. Use -1 for INF
	                        }
	                    }
	                Atomic
	                    {
	                    Name = Link
	                    Ports = 1 ; 1
	                    Path = PhaseI/Link.h
	                    Description = Vector to scalar signal
	                    Graphic
	                        {
	                        Position = -3990 ; 585
	                        Dimension = 630 ; 630
	                        Direction = Down
	                        Color = 15
	                        Icon = %vectors%vec2scalar.svg
	                        }
	                    Parameters
	                        {
	                        link.capacity = Str; FelixLink.capacity ; Signal Index
	                        link.delay = Str; link.delay ; 
	                        }
	                    }
	                Point
	                    {
	                    ConectedLines = 3 ; 4 ; 5
	                    ConectedExtrems = Org ; Org ; Org
	                    Position = -3675 ; 1950
	                    }
	                Line
	                    {
	                    Source = Prt ;  1 ;  1 ; 0
	                    Sink = Cmp ;  1 ;  1 ; -1
	                    PointX = -4125 ; -3675 ; -3675
	                    PointY = -3525 ; -3525 ; -1365
	                    }
	                Line
	                    {
	                    Source = Cmp ;  1 ;  1 ; 0
	                    Sink = Cmp ;  2 ;  1 ; -1
	                    PointX = -3675 ; -3675 ; -3675
	                    PointY = -450 ; -450 ; 435
	                    }
	                Line
	                    {
	                    Source = Cmp ;  2 ;  1 ; 0
	                    Sink = Pnt ;  1 ; -1 ; 0
	                    PointX = -3675 ; -3675 ; -3675
	                    PointY = 1350 ; 1350 ; 1950
	                    }
	                Line
	                    {
	                    Source = Cmp ;  1 ;  2 ; -1
	                    Sink = Pnt ;  1 ; -1 ; 0
	                    PointX = -3375 ; -3375 ; -2325 ; -2325 ; -3675
	                    PointY = -1365 ; -1650 ; -1650 ; 1950 ; 1950
	                    }
	                Line
	                    {
	                    Source = Pnt ;  1 ; -1 ; 0
	                    Sink = Prt ;  2 ;  1 ; -1
	                    PointX = -3675 ; -3675 ; -1065 ; -1065
	                    PointY = 1950 ; 2775 ; 2775 ; 2850
	                    }
	                }
	            }
				Coupled
	            {
	            Type = Coordinator
	            Name = Link27
	            Ports = 1; 1
	            Description = Coupled DEVS model
	            Graphic
	                {
	                Position = 9525; -9870
	                Dimension = 645; 705
	                Direction = Down
	                Color = 15
	                Icon = %datanetworks%ethernet.jpg
	                Window = 5000; 5000; 5000; 5000
	                }
	            Parameters
	                {
	                }
	            System
	                {
	                Inport
	                    {
	                    Name = Inport0
	                    CoupledPort = 1
	                    Description = 
	                    Graphic
	                        {
	                        Position = -4740 ; -3525
	                        Dimension = 480
	                        Direction = Right
	                        }
	                    }
	                Outport
	                    {
	                    Name = Outport0
	                    CoupledPort = 1
	                    Description = 
	                    Graphic
	                        {
	                        Position = -930 ; 2850
	                        Dimension = 360
	                        Direction = Right
	                        }
	                    }
	                Atomic
	                    {
	                    Name = InNICQueue
	                    Ports = 2 ; 2
	                    Path = PhaseI/NetworkQueue.h
	                    Description = In0 Incomming packets to queueIn1 Incoming signal to request dequeueOut0 Outgoing dequeued packetsOut1 Outgoing queue lenght informationQueues incoming packets and enqueues them as required by aexternal entity. FIFO Policy (FirstInFirstOut). Provides information its internal state.
	                    Graphic
	                        {
	                        Position = -3855 ; -1230
	                        Dimension = 675 ; 675
	                        Direction = Down
	                        Color = 15
	                        Icon = %datanetworks%queue.png
	                        }
	                    Parameters
	                        {
	                        MaxCapacity = Str; FelixNICQueue1.maxBuffer ; Queue Capacity in Bytes. (Use -1 for INF capacity)
	                        ForcedPeriod = Str; -1 ; Force minimum period to transition. Use -1 for INF
	                        }
	                    }
	                Atomic
	                    {
	                    Name = Link
	                    Ports = 1 ; 1
	                    Path = PhaseI/Link.h
	                    Description = Vector to scalar signal
	                    Graphic
	                        {
	                        Position = -3990 ; 585
	                        Dimension = 630 ; 630
	                        Direction = Down
	                        Color = 15
	                        Icon = %vectors%vec2scalar.svg
	                        }
	                    Parameters
	                        {
	                        link.capacity = Str; FelixLink.capacity ; Signal Index
	                        link.delay = Str; link.delay ; 
	                        }
	                    }
	                Point
	                    {
	                    ConectedLines = 3 ; 4 ; 5
	                    ConectedExtrems = Org ; Org ; Org
	                    Position = -3675 ; 1950
	                    }
	                Line
	                    {
	                    Source = Prt ;  1 ;  1 ; 0
	                    Sink = Cmp ;  1 ;  1 ; -1
	                    PointX = -4125 ; -3675 ; -3675
	                    PointY = -3525 ; -3525 ; -1365
	                    }
	                Line
	                    {
	                    Source = Cmp ;  1 ;  1 ; 0
	                    Sink = Cmp ;  2 ;  1 ; -1
	                    PointX = -3675 ; -3675 ; -3675
	                    PointY = -450 ; -450 ; 435
	                    }
	                Line
	                    {
	                    Source = Cmp ;  2 ;  1 ; 0
	                    Sink = Pnt ;  1 ; -1 ; 0
	                    PointX = -3675 ; -3675 ; -3675
	                    PointY = 1350 ; 1350 ; 1950
	                    }
	                Line
	                    {
	                    Source = Cmp ;  1 ;  2 ; -1
	                    Sink = Pnt ;  1 ; -1 ; 0
	                    PointX = -3375 ; -3375 ; -2325 ; -2325 ; -3675
	                    PointY = -1365 ; -1650 ; -1650 ; 1950 ; 1950
	                    }
	                Line
	                    {
	                    Source = Pnt ;  1 ; -1 ; 0
	                    Sink = Prt ;  2 ;  1 ; -1
	                    PointX = -3675 ; -3675 ; -1065 ; -1065
	                    PointY = 1950 ; 2775 ; 2775 ; 2850
	                    }
	                }
	            }
				    Atomic
                {
                Name = FinalizationCommands
                Ports = 0 ; 0
                Path = sinks/multipleSimulationCommands.h
                Description = Executes Scilab commands when using multiple simulation runs (at the end of each simulation, and at the end of ALL simulations).\nThis model should run with LAST priority
                Graphic
                    {
                    Position = -2685 ; -12435
                    Dimension = 570 ; 570
                    Direction = Right
                    Color = 15
                    Icon = %datanetworks%scilab.bmp
                    }
                Parameters
                    {
                    initSimulationCommandName = Str; ../examples/Matias/PhaseI/Scilab/firstSimulation.sce ; 
                    eachSimulationCommandName = Str; ../examples/Matias/PhaseI/Scilab/eachSimulation.sce ; 
                    lastSimulationCommandName = Str; ../examples/Matias/PhaseI/Scilab/lastSimulation.sce ; 
                    }
                }
            }
    }
